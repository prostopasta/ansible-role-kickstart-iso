---
- name: Get ISO file name and checksum
  set_fact:
    image_info: "{{ dict('file_name': (item.split('  ')[1]).split('.')[0], 'checksum': item.split('  ')[0]) }}"
  loop: "{{ lookup('url', image_check_url, wantlist=True) }}"
  when: item|search(image_type)
  changed_when: false

- name: Check custom ISO images not already created
  find:
    paths: "{{ image_dest_dir }}"
    patterns: "{{ image_info.file_name }}*.iso"
  register: image_custom_iso_create

- name: Create custom ISO images
  block:

    - name: Ensure required system packages are present
      become: true
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - 'wget'
        - 'xorriso'
      register: image_packages_install
      until: image_packages_install is success
      retries: 3
      delay: 60

    - name: Ensure required ISO image directories are empty and present
      file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        mode: 0755
      with_items:
        - {path: "{{ image_src_dir }}/iso", state: 'absent'}
        - {path: "{{ image_src_dir }}/iso", state: 'directory'}
        - {path: "/tmp/{{ image_info.file_name }}", state: 'absent'}
        - {path: "/tmp/{{ image_info.file_name }}", state: 'directory'}
        - {path: "{{ image_dest_dir }}", state: 'directory'}

    # - name: Download ISO image (no redirect)
    #   get_url:
    #     url: "{{ image_url }}"
    #     dest: "{{ image_src_dir }}/image.iso"
    #     checksum: "{{ image_info.checksum }}"
    #     mode: 0755
    #     unsafe_writes: true

    - name: Download ISO image (redirect)
      command: "wget {{ image_base_url }}{{ image_info.file_name }}.iso -O image.iso"
      args:
        chdir: "{{ image_src_dir }}"
        warn: false

    - name: Verify ISO image
      command: "sha256sum image.iso"
      args:
        chdir: "{{ image_src_dir }}"
      register: image_verify
      failed_when: (image_verify.stdout).split('  ')[0] != image_info.checksum

    - name: Mount ISO image
      become: true
      command: "mount -t iso9660 -o loop {{ image_src_dir }}/image.iso /tmp/{{ image_info.file_name }}"
      args:
        warn: false

    # - name: Export ISO image (slow)
    #   become: true
    #   copy:
    #     src: "/tmp/{{ image_info.file_name }}/"
    #     dest: "{{ image_src_dir }}/iso"
    #     mode: preserve
    #     owner: "{{ ansible_real_user_id }}"
    #     group: "{{ ansible_real_user_id }}"

    - name: Export ISO image (fast)
      become: true
      shell: |
        cp -pRf /tmp/{{ image_info.file_name }}/* {{ image_src_dir }}/iso
        chown -R {{ ansible_real_user_id }}:{{ ansible_real_user_id }} {{ image_src_dir }}/iso
      args:
        warn: false

    - name: Unmount ISO image
      become: true
      command: "umount /tmp/{{ image_info.file_name }}"

    - name: Edit Boot-Menu config to automatically run kickstart config
      lineinfile:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        insertafter: "{{ item.insertafter }}"
        firstmatch: "{{ item.firstmatch }}"
      with_items:
        - {path: "{{ image_src_dir }}/iso/{{ image_bios_conf_file }}", state: 'absent', regexp: '^  menu default',
           line: '', insertafter: EOF, firstmatch: false}
        - {path: "{{ image_src_dir }}/iso/{{ image_bios_conf_file }}", state: 'present',
           regexp: ".*{{ ('inst.stage2=hd:LABEL=' + image_boot_name + ' quiet')|regex_escape() }}",
           line: "  append initrd=initrd.img inst.ks=hd:LABEL={{ image_boot_name }}:/kickstart.cfg
                  inst.stage2=hd:LABEL={{ image_boot_name }} quiet",
           insertafter: EOF, firstmatch: false}
        - {path: "{{ image_src_dir }}/iso/{{ image_bios_conf_file }}", state: 'present', regexp: '^  menu default',
           line: '  menu default', insertafter: '^  menu label \^Install', firstmatch: true}
        - {path: "{{ image_src_dir }}/iso/{{ image_uefi_conf_file }}", state: 'present', regexp: '^set default=',
           line: 'set default="0"', insertafter: EOF, firstmatch: false}
        - {path: "{{ image_src_dir }}/iso/{{ image_uefi_conf_file }}", state: 'present',
           regexp: ".*{{ ('inst.stage2=hd:LABEL=' + image_boot_name + ' quiet')|regex_escape() }}",
           line: "        linuxefi /images/pxeboot/vmlinuz inst.ks=hd:LABEL={{ image_boot_name }}:/kickstart.cfg
                  inst.stage2=hd:LABEL={{ image_boot_name }} quiet",
           insertafter: EOF, firstmatch: false}

    - name: Loop over ISO image creation list
      include_tasks: create.yml
      with_items: "{{ (image_network_static_hosts|default([])) + [dict(ip=image_network_bootproto)] }}"
      loop_control:
        loop_var: image_host

    - name: Delete ISO image source directories
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ image_src_dir }}/image.iso"
        - "{{ image_src_dir }}/iso"
        - "/tmp/{{ image_info.file_name }}"

  when: image_custom_iso_create.matched|int == 0
