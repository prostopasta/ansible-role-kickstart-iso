---
- name: Get ISO file name and checksum
  set_fact:
    kickstart_iso_info: "{{ dict(file_name=(item.split('  ')[1]).split('.')[0], checksum=item.split('  ')[0]) }}"
  loop: "{{ lookup('url', kickstart_iso_check_url, wantlist=True) }}"
  when: item is search(kickstart_iso_type)
  changed_when: false

- name: Ensure kickstart ISO images not already exist
  find:
    paths: "{{ kickstart_iso_storage }}"
    patterns: "{{ kickstart_iso_info.file_name }}_*.iso"
  register: kickstart_iso_check

- name: Create kickstart ISO images
  block:

    - name: Ensure required system packages are present
      become: true
      package:
        name: "{{ item }}"
        state: present
      loop:
        - 'wget'
        - 'libc'
        - 'libpthread'
      register: kickstart_iso_packages_install
      until: kickstart_iso_packages_install is succeeded
      retries: 3
      delay: 60

    - name: Ensure required xorriso CLT is present
      become: true
      command: xorriso -version
      register: kickstart_iso_xorriso_check
      ignore_errors: true
      changed_when: false

    - name: Ensure required ISO image directories are empty and present
      file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        mode: 0755
      loop:
        - {path: "{{ kickstart_iso_storage }}/iso", state: 'absent'}
        - {path: "{{ kickstart_iso_storage }}/iso", state: 'directory'}
        - {path: "/tmp/{{ kickstart_iso_info.file_name }}", state: 'absent'}
        - {path: "/tmp/{{ kickstart_iso_info.file_name }}", state: 'directory'}
        - {path: "/tmp/xorriso", state: 'absent'}
        - {path: "/tmp/xorriso", state: 'directory'}

    - name: Build xorriso CLT
      become: true
      shell: |
        cd /tmp/xorriso
        wget https://ftp.gnu.org/gnu/xorriso/xorriso-1.5.0.tar.gz
        tar xzf xorriso-1.5.0.tar.gz
        cd xorriso-1.5.0
        ./configure --prefix=/usr
        ./xorriso/xorriso
        make buildstamped
        strip ./xorriso/xorriso
        make install
      when: kickstart_iso_xorriso_check is failed

    # - name: Download ISO image (no redirect)
    #   get_url:
    #     url: "{{ kickstart_iso_url }}"
    #     dest: "{{ kickstart_iso_storage }}/image.iso"
    #     checksum: "{{ kickstart_iso_info.checksum }}"
    #     mode: 0755
    #     unsafe_writes: true

    - name: Download ISO image (redirect)
      command: "wget {{ kickstart_iso_base_url }}{{ kickstart_iso_info.file_name }}.iso -O image.iso"
      args:
        chdir: "{{ kickstart_iso_storage }}"
        warn: false

    - name: Verify ISO image
      command: "sha256sum image.iso"
      args:
        chdir: "{{ kickstart_iso_storage }}"
      register: kickstart_iso_verify
      failed_when: (kickstart_iso_verify.stdout).split('  ')[0] != kickstart_iso_info.checksum

    - name: Mount ISO image
      become: true
      command: "mount -t iso9660 -o loop {{ kickstart_iso_storage }}/image.iso /tmp/{{ kickstart_iso_info.file_name }}"
      args:
        warn: false

    # - name: Export ISO image (slow)
    #   become: true
    #   copy:
    #     src: "/tmp/{{ kickstart_iso_info.file_name }}/"
    #     dest: "{{ kickstart_iso_storage }}/iso"
    #     mode: preserve
    #     owner: "{{ ansible_real_user_id }}"
    #     group: "{{ ansible_real_user_id }}"

    - name: Export ISO image (fast)
      become: true
      shell: |
        cp -pRf /tmp/{{ kickstart_iso_info.file_name }}/* {{ kickstart_iso_storage }}/iso
        chown -R {{ ansible_real_user_id }}:{{ ansible_real_user_id }} {{ kickstart_iso_storage }}/iso
      args:
        warn: false

    - name: Unmount ISO image
      become: true
      command: "umount /tmp/{{ kickstart_iso_info.file_name }}"

    - name: Edit Boot-Menu config to automatically run kickstart config
      lineinfile:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        insertafter: "{{ item.insertafter }}"
        firstmatch: "{{ item.firstmatch }}"
      loop:
        - {path: "{{ kickstart_iso_storage }}/iso/{{ kickstart_iso_bios_conf_file }}", state: 'absent',
           regexp: '^  menu default', line: '', insertafter: EOF, firstmatch: false}
        - {path: "{{ kickstart_iso_storage }}/iso/{{ kickstart_iso_bios_conf_file }}", state: 'present',
           regexp: ".*{{ ('inst.stage2=hd:LABEL=' + kickstart_iso_boot_name + ' quiet')|regex_escape() }}",
           line: "  append initrd=initrd.img inst.ks=hd:LABEL={{ kickstart_iso_boot_name }}:/kickstart.cfg
                  inst.stage2=hd:LABEL={{ kickstart_iso_boot_name }} quiet",
           insertafter: EOF, firstmatch: false}
        - {path: "{{ kickstart_iso_storage }}/iso/{{ kickstart_iso_bios_conf_file }}", state: 'present',
           regexp: '^  menu default', line: '  menu default', insertafter: '^  menu label \^Install', firstmatch: true}
        - {path: "{{ kickstart_iso_storage }}/iso/{{ kickstart_iso_uefi_conf_file }}", state: 'present',
           regexp: '^set default=', line: 'set default="0"', insertafter: EOF, firstmatch: false}
        - {path: "{{ kickstart_iso_storage }}/iso/{{ kickstart_iso_uefi_conf_file }}", state: 'present',
           regexp: ".*{{ ('inst.stage2=hd:LABEL=' + kickstart_iso_boot_name + ' quiet')|regex_escape() }}",
           line: "        linuxefi /images/pxeboot/vmlinuz
                  inst.ks=hd:LABEL={{ kickstart_iso_boot_name }}:/kickstart.cfg
                  inst.stage2=hd:LABEL={{ kickstart_iso_boot_name }} quiet",
           insertafter: EOF, firstmatch: false}

    - name: Loop over ISO image creation list
      include_tasks: create.yml
      loop: "{{ (kickstart_iso_network_static_hosts|default([])) + [dict(ip=kickstart_iso_network_bootproto)] }}"
      loop_control:
        loop_var: kickstart_iso_host

    - name: Delete ISO image source directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ kickstart_iso_storage }}/image.iso"
        - "{{ kickstart_iso_storage }}/iso"
        - "/tmp/{{ kickstart_iso_info.file_name }}"
        - "/tmp/xorriso"

  when: kickstart_iso_check.matched|int == 0
